import pytest
from src.data.models.user_model import UserModel

# 1. Verifica usuarios con el nombre "marcos"
def test_get_users(client, test_create_user):
    """Verifica que GET /users devuelva la lista de usuarios."""
    response = client.get("/api/v1/users")
    assert response.status_code == 200

    data = response.json()
    assert isinstance(data, list)
    assert len(data) == 1

    user = data[0]
    assert user["username"] == "marcos"
    assert "id" in user
    assert "date" in user

# 2. Crear un usuario válido
@pytest.fixture
def test_create_user(client):
    response = client.post(
        "/api/v1/users",  # ajusta si tu ruta es distinta
        json={"username": "marcos", "password": "123456"}
    )
    assert response.status_code == 201, response.text
    data = response.json()
    assert "id" in data
    assert data["username"] == "marcos"
    assert "date" in data  # fecha autogenerada


# 3. Evitar duplicados
def test_create_duplicate_user(client):
    client.post("/api/v1/users", json={"username": "marcos", "password": "123456"})
    response = client.post(
        "/api/v1/users",
        json={"username": "marcos", "password": "otro"}
    )
    assert response.status_code == 409
    assert "ya está en uso" in response.text.lower()


# 4. Verificar que la fecha se asigna automáticamente
def test_user_date_autogenerated(client):
    response = client.post(
        "/api/v1/users",
        json={"username": "ana", "password": "pass123"}
    )
    assert response.status_code == 201
    data = response.json()
    assert data["date"] is not None
    assert "T" in data["date"]  # debería venir como string tipo ISO8601